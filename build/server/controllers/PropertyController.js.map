{"version":3,"sources":["../../../api/server/controllers/PropertyController.js"],"names":["util","Util","PropertyController","req","res","PropertiesService","getAllProperties","allProperties","console","log","length","setSuccess","send","setError","id","params","Number","getSingleProperty","property","body","propertyTitle","slug","location","price","size","rooms","beds","bathrooms","featured","description","newProperty","addProperty","createdProperty","message","updatedProperty","updateSingleProperty","updateProperty","deleteSingleProperty"],"mappings":"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","sourcesContent":["import PropertiesService from '../services/PropertiesService';\r\nimport Util from '../utils/Utils';\r\n\r\nconst util = new Util();\r\n\r\nclass PropertyController {\r\n  static async getPropeties(req, res) {\r\n    try {\r\n      const allProperties = await PropertiesService.getAllProperties();\r\n\r\n      console.log('Get all properties foiund', allProperties);\r\n      if (allProperties.length > 0) {\r\n        util.setSuccess(200, 'Properties returned successfully', allProperties);\r\n      } else {\r\n        util.setSuccess(200, 'No properties found at the moment');\r\n      }\r\n      return util.send(res);\r\n    } catch (error) {\r\n      util.setError(400, error);\r\n      return util.send(res);\r\n    }\r\n  }\r\n\r\n  static async getASingleProperty(req, res) {\r\n    const { id } = req.params;\r\n    if (!Number(id)) {\r\n      util.setError(\r\n        400,\r\n        'Invalid property id, please input valid numeric number'\r\n      );\r\n      return util.send(res);\r\n    }\r\n\r\n    try {\r\n      const property = await PropertiesService.getSingleProperty(id);\r\n\r\n      console.log('The property found:', property);\r\n\r\n      if (!property) {\r\n        util.setError(\r\n          404,\r\n          `Invalid property id, please input valid numeric number ${id}`\r\n        );\r\n      } else {\r\n        util.setSuccess(200, 'Property returned successfully', property);\r\n      }\r\n      return util.send(res);\r\n    } catch (error) {\r\n      util.setError(404, error);\r\n      return util.send(res);\r\n    }\r\n  }\r\n\r\n  static async addProperty(req, res) {\r\n    const {\r\n      propertyTitle,\r\n      slug,\r\n      location,\r\n      price,\r\n      size,\r\n      rooms,\r\n      beds,\r\n      bathrooms,\r\n      featured,\r\n      description,\r\n    } = req.body;\r\n\r\n    if (\r\n      propertyTitle === '' ||\r\n      slug === '' ||\r\n      location === '' ||\r\n      price === '' ||\r\n      size === '' ||\r\n      rooms === '' ||\r\n      beds === '' ||\r\n      bathrooms === '' ||\r\n      featured === '' ||\r\n      description === ''\r\n    ) {\r\n      util.setError(400, 'Please provide complete details');\r\n      return util.send(res);\r\n    }\r\n    const newProperty = req.body;\r\n    try {\r\n      const createdProperty = await PropertiesService.addProperty(newProperty);\r\n      util.setSuccess(201, 'Property created successfully', createdProperty);\r\n      return util.send(res);\r\n    } catch (error) {\r\n      util.setError(400, error.message);\r\n      return util.send(res);\r\n    }\r\n  }\r\n\r\n  static async updatedProperty(req, res) {\r\n    const updatedProperty = req.body;\r\n    const { id } = req.params;\r\n    if (!Number(id)) {\r\n      util.setError(\r\n        400,\r\n        'Invalid property id, please input valid numeric number'\r\n      );\r\n      return util.send(res);\r\n    }\r\n    try {\r\n      const updateProperty = await PropertiesService.updateSingleProperty(\r\n        id,\r\n        updatedProperty\r\n      );\r\n      if (!updateProperty) {\r\n        util.setError(404, `Property with this id does not exist: ${id}`);\r\n      } else {\r\n        util.setSuccess(200, 'Property updated successfully', updateProperty);\r\n      }\r\n      return util.send(res);\r\n    } catch (error) {\r\n      util.setError(404, error);\r\n      return util.send(res);\r\n    }\r\n  }\r\n\r\n  static async deleteProperty(req, res) {\r\n    const { id } = req.params;\r\n\r\n    if (!Number(id)) {\r\n      util.setError(\r\n        400,\r\n        'Invalid property id, please input valid numeric number'\r\n      );\r\n      return util.send(res);\r\n    }\r\n\r\n    try {\r\n      const property = await PropertiesService.deleteSingleProperty(id);\r\n\r\n      if (property) {\r\n        util.setSuccess(200, 'Property deleted');\r\n      } else {\r\n        util.setError(404, `Property with this id ${id} does not exist`);\r\n      }\r\n      return util.send(res);\r\n    } catch (error) {\r\n      util.setError(400, error);\r\n      return util.send(res);\r\n    }\r\n  }\r\n}\r\n\r\nexport default PropertyController;\r\n"],"file":"PropertyController.js"}